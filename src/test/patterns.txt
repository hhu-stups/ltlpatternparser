def <global> absence(p):
G !p

def <before r> absence(p):
F r => (!p U r)

def <after q> absence(p):
G (q => G !p)

def <between q and r> absence(p):
G((q & !r & F r) => (!p U r))

def <after q until r> absence(p):
G(q & !r => (!p W r))

/*----------------*/
def <global> existence(p):
F p

def <before r> existence(p):
!r W (p & !r)

def <after q> existence(p):
G(!q | F(q & F p))

def <between q and r> existence(p):
G(q & !r => (!r W (p & !r)))

def <after q until r> existence(p):
G(q & !r => (!r W (p & !r)))

/*----------------*/
def <global> universality(p):
G p

def <before r> universality(p):
F r => (p U r)

def <after q> universality(p):
G(q => G(p))

def <between q and r> universality(p):
G((q & !r & F r) => (p U r))

def <after q until r> universality(p):
G(q & !r => (p W r))

/*----------------*/
def <global> bounded_existence(p, n:num):
var s: (!p W (p W G!p))
count 1 up to n:
s: (!p W (p W s))
end
s

def <before r> bounded_existence(p, n:num):
var s: ((!p & !r) U (r | ((p & !r) U (r | (!p U r)))))
count 1 up to n:
s: ((!p & !r) U (r | ((p & !r) U (r | s))))
end
F r => s

def <after q> bounded_existence(p, n:num):
var s: (!p W (p W G!p))
count 1 up to n:
s: (!p W (p W s))
end
F q => (!q U (q & s))
// F q => (!q U (q & bounded_existence<global>(p, n)))

def <between q and r> bounded_existence(p, n:num):
var s: ((!p & !r) U (r | ((p & !r) U (r | (!p U r)))))
count 1 up to n:
s: ((!p & !r) U (r | ((p & !r) U (r | s))))
end
G((q & F r) => s)

def <after q until r> bounded_existence(p, n:num):
var s: ((!p & !r) U (r | ((p & !r) U (r | (!p W r) | G p))))
count 1 up to n:
s: ((!p & !r) U (r | ((p & !r) U (r | s))))
end
G(q => s)

/*----------------*/
def <global> precedence(s, p):
!p W s

def <before r> precedence(s, p):
F r => (!p U (s | r))

def <after q> precedence(s, p):
G !q | F(q & (!p W s))

def <between q and r> precedence(s, p):
G((q & !r & F r) => (!p U (s | r)))

def <after q until r> precedence(s, p):
G(q & !r => (!p W (s | r)))

/*----------------*/
def <global> response(s, p):
G(p => F s)

def <before r> response(s, p):
F r => (p => (!r U (s & !r))) U r

def <after q> response(s, p):
G(q => G(p => F s))

def <between q and r> response(s, p):
G((q & !r & F r) => (p => (!r U (s & !r))) U r)

def <after q until r> response(s, p):
G(q & !r => ((p => (!r U (s & !r))) W r))

	